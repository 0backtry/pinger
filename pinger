#!/bin/bash

# Function to handle keyboard interrupt
interrupt_handler() {
    echo "Keyboard interrupt received. Exiting..."
    exit 1
}

# Trap keyboard interrupt (SIGINT)
trap interrupt_handler SIGINT

# Default values
THREADS=10  # Default threading value
OUTPUT_FILE=""  # Default output file
VERBOSE=false  # Default verbose option

# Function to display script usage
usage() {
    echo "Usage: $0 -f <file> [-t <threads>] -o <output_file> [-v]"
    echo "Options:"
    echo "  -f <file>         File containing IP addresses or subdomains"
    echo "  -t <threads>      Number of threads (default: 10, max: 100)"
    echo "  -o <output_file>  Output file for up IPs"
    echo "  -v                Verbose mode (optional)"
    echo "  -h                Display this help message"
    exit 1
}

# Parse command-line options
while getopts ":f:t:o:vh" opt; do
    case ${opt} in
        f)
            FILE=$OPTARG
            ;;
        t)
            THREADS=$OPTARG
            ;;
        o)
            OUTPUT_FILE=$OPTARG
            ;;
        v)
            VERBOSE=true
            ;;
        h)
            usage
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            usage
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            usage
            ;;
    esac
done
shift $((OPTIND -1))

# Check if the file argument is provided
if [ -z "$FILE" ] || [ -z "$OUTPUT_FILE" ]; then
    echo "Error: File or output file argument is missing."
    usage
fi

# Check if the file exists
if [ ! -f "$FILE" ]; then
    echo "File not found: $FILE"
    exit 1
fi

# Validate threading value
if [ "$THREADS" -gt 100 ]; then
    THREADS=100
fi

# Function to ping a single target
ping_target() {
    local target=$1
    # Ping the target once with a timeout of 1 second
    ping -c 1 -W 1 "$target" > /dev/null 2>&1
    # Check the return status of the ping command
    if [ $? -eq 0 ]; then
        echo "$target is up"
        echo "$target" >> "$OUTPUT_FILE"  # Write the up IP to the output file
    elif [ "$VERBOSE" = true ]; then
        echo "$target is down"
    fi
}

# Read targets from the file and store them in an array
targets=()
while IFS= read -r target || [[ -n "$target" ]]; do
    targets+=("$target")
done < "$FILE"

# Calculate number of threads
num_targets=${#targets[@]}
threads=$(( num_targets < THREADS ? num_targets : THREADS ))

# Iterate through the array of targets and ping them using threads
for (( i=0; i<num_targets; i+=threads )); do
    for (( j=0; j<threads && i+j<num_targets; j++ )); do
        index=$(( i+j ))
        # Ping each target in a separate thread
        ping_target "${targets[index]}" &
    done
    # Wait for all threads in this batch to finish
    wait
done
